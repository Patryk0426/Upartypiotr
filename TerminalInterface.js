const readline = require('readline');
const path = require('path');
const VoiceManager = require('./VoiceManager');

class TerminalInterface {
  constructor(client) {
    this.client = client;
    this.voiceManager = new VoiceManager();
  }

  startListening() {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    console.log("üñ•Ô∏è Terminal administratora bota uruchomiony. Wpisz 'help' po listƒô komend.");

    rl.on('line', async (input) => {
      const [cmd, ...args] = input.trim().split(' ');

      switch (cmd) {
        case 'play': {
          const [vcId, fileName] = args;
          if (!vcId || !fileName) return console.log("U≈ºycie: play <VC_ID> <plik.mp3>");
          const filePath = path.join(__dirname, 'sounds', fileName);
          this.voiceManager.playToChannel(this.client, vcId, filePath);
          break;
        }

        case 'kick': {
          const [userId] = args;
          const member = await this.findMemberById(userId);
          if (member?.voice?.channel) {
            await member.voice.disconnect();
            console.log(`‚úÖ Wyrzucono ${member.user.tag} z VC.`);
          } else {
            console.log(`‚ùå U≈ºytkownik nie jest na VC.`);
          }
          break;
        }

        case 'server': {
          const [subcmd, userId] = args;
          if (subcmd === 'kick') {
            if (!userId) {
              console.log("U≈ºycie: server kick <USER_ID>");
              break;
            }
            const member = await this.findMemberById(userId);
            if (member) {
              try {
                await member.kick();
                console.log(`‚úÖ U≈ºytkownik ${member.user.tag} zosta≈Ç zabrany przez CIA.`);
                // Wysy≈Çanie wiadomo≈õci na kana≈Ç o ID 715904416556777558
                const channel = this.client.channels.cache.get('715904416556777558');
                if (channel) {
                  channel.send(`U≈ºytkownik ${member.user.tag} zosta≈Ç zabrany przez CIA.`);
                } else {
                  console.log("‚ùå Nie znaleziono kana≈Çu o ID 715904416556777558.");
                }
              } catch (err) {
                console.log(`‚ùå Nie uda≈Ço siƒô wyrzuciƒá u≈ºytkownika: ${err.message}`);
              }
            } else {
              console.log("‚ùå Nie znaleziono u≈ºytkownika na ≈ºadnym serwerze.");
            }
          } else {
            console.log('‚ùå Nieznana subkomenda dla "server". Dostƒôpne: kick');
          }
          break;
        }

        case 'mute': {
          const [userId] = args;
          const member = await this.findMemberById(userId);
          if (member?.voice?.channel) {
            await member.voice.setMute(true);
            console.log(`üîá Wyciszono ${member.user.tag}.`);
          } else {
            console.log(`‚ùå Nie znaleziono u≈ºytkownika na VC.`);
          }
          break;
        }

        case 'unmute': {
          const [userId] = args;
          const member = await this.findMemberById(userId);
          if (member?.voice?.channel) {
            await member.voice.setMute(false);
            console.log(`üîä Odmutowano ${member.user.tag}.`);
          } else {
            console.log(`‚ùå Nie znaleziono u≈ºytkownika na VC.`);
          }
          break;
        }

        case 'deaf': {
          const [userId] = args;
          const member = await this.findMemberById(userId);
          if (member?.voice?.channel) {
            await member.voice.setDeaf(true);
            console.log(`üìµ Og≈Çuszono ${member.user.tag}.`);
          } else {
            console.log(`‚ùå Nie znaleziono u≈ºytkownika na VC.`);
          }
          break;
        }

        case 'undeaf': {
          const [userId] = args;
          const member = await this.findMemberById(userId);
          if (member?.voice?.channel) {
            await member.voice.setDeaf(false);
            console.log(`üîî Odog≈Çuszono ${member.user.tag}.`);
          } else {
            console.log(`‚ùå Nie znaleziono u≈ºytkownika na VC.`);
          }
          break;
        }
        case 'exit': {
          console.log("‚ùå Zamykanie terminala...");
          process.exit(0);
        }

        default:
          console.log('‚ùå Nieznana komenda. Wpisz "help".');
      }
    });
  }

  async findMemberById(userId) {
    for (const [guildId, guild] of this.client.guilds.cache) {
      const member = await guild.members.fetch(userId).catch(() => null);
      if (member) return member;
    }
    return null;
  }
}

module.exports = TerminalInterface;
